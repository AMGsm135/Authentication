// <auto-generated />
using System;
using Amg.Authentication.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Amg.Authentication.Persistence.Migrations.Database
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230918132411_InitialAggregatedMigration")]
    partial class InitialAggregatedMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Dgab.Authentication.DomainModel.Modules.Groups.Entities.GroupPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("PermissionId");

                    b.ToTable("GroupPermissions");
                });

            modelBuilder.Entity("Dgab.Authentication.DomainModel.Modules.Groups.Entities.GroupUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupUsers");
                });

            modelBuilder.Entity("Dgab.Authentication.DomainModel.Modules.Groups.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Dgab.Authentication.DomainModel.Modules.Permissions.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Dgab.Authentication.DomainModel.Modules.UserActivities.Activities.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdministrative")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UserActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserActivityId")
                        .IsUnique()
                        .HasFilter("[UserActivityId] IS NOT NULL");

                    b.ToTable("Activities");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Activity");
                });

            modelBuilder.Entity("Dgab.Authentication.DomainModel.Modules.UserActivities.UserActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActivityDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("UserActivities");
                });

            modelBuilder.Entity("Dgab.Authentication.DomainModel.Modules.UserActivities.Activities.ChangePasswordActivity", b =>
                {
                    b.HasBaseType("Dgab.Authentication.DomainModel.Modules.UserActivities.Activities.Activity");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ChangePasswordActivity");
                });

            modelBuilder.Entity("Dgab.Authentication.DomainModel.Modules.UserActivities.Activities.ChangeUserOtpStatusActivity", b =>
                {
                    b.HasBaseType("Dgab.Authentication.DomainModel.Modules.UserActivities.Activities.Activity");

                    b.Property<bool>("IsEnabled")
                        .HasColumnName("IsActive")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("ChangeUserOtpStatusActivity");
                });

            modelBuilder.Entity("Dgab.Authentication.DomainModel.Modules.UserActivities.Activities.ChangeUserRolesActivity", b =>
                {
                    b.HasBaseType("Dgab.Authentication.DomainModel.Modules.UserActivities.Activities.Activity");

                    b.Property<string>("Role")
                        .HasColumnName("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ChangeUserRolesActivity");
                });

            modelBuilder.Entity("Dgab.Authentication.DomainModel.Modules.UserActivities.Activities.ChangeUserStatusActivity", b =>
                {
                    b.HasBaseType("Dgab.Authentication.DomainModel.Modules.UserActivities.Activities.Activity");

                    b.Property<bool>("IsActive")
                        .HasColumnName("IsActive")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("ChangeUserStatusActivity");
                });

            modelBuilder.Entity("Dgab.Authentication.DomainModel.Modules.UserActivities.Activities.ForgetPasswordActivity", b =>
                {
                    b.HasBaseType("Dgab.Authentication.DomainModel.Modules.UserActivities.Activities.Activity");

                    b.HasDiscriminator().HasValue("ForgetPasswordActivity");
                });

            modelBuilder.Entity("Dgab.Authentication.DomainModel.Modules.UserActivities.Activities.RegisterUserActivity", b =>
                {
                    b.HasBaseType("Dgab.Authentication.DomainModel.Modules.UserActivities.Activities.Activity");

                    b.Property<bool>("ByAdmin")
                        .HasColumnName("ByAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnName("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("RegisterUserActivity");
                });

            modelBuilder.Entity("Dgab.Authentication.DomainModel.Modules.UserActivities.Activities.ResendCodeActivity", b =>
                {
                    b.HasBaseType("Dgab.Authentication.DomainModel.Modules.UserActivities.Activities.Activity");

                    b.Property<string>("CodeType")
                        .IsRequired()
                        .HasColumnName("CodeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ResendCodeActivity");
                });

            modelBuilder.Entity("Dgab.Authentication.DomainModel.Modules.UserActivities.Activities.SignInActivity", b =>
                {
                    b.HasBaseType("Dgab.Authentication.DomainModel.Modules.UserActivities.Activities.Activity");

                    b.Property<string>("ResultType")
                        .IsRequired()
                        .HasColumnName("ResultType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SignInType")
                        .IsRequired()
                        .HasColumnName("SignInType")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("SignInActivity");
                });

            modelBuilder.Entity("Dgab.Authentication.DomainModel.Modules.UserActivities.Activities.UpdateProfileActivity", b =>
                {
                    b.HasBaseType("Dgab.Authentication.DomainModel.Modules.UserActivities.Activities.Activity");

                    b.Property<string>("Email")
                        .HasColumnName("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("TwoFactorEnabled")
                        .HasColumnName("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("UpdateProfileActivity");
                });

            modelBuilder.Entity("Dgab.Authentication.DomainModel.Modules.UserActivities.Activities.VerifyCodeActivity", b =>
                {
                    b.HasBaseType("Dgab.Authentication.DomainModel.Modules.UserActivities.Activities.Activity");

                    b.Property<string>("CodeType")
                        .IsRequired()
                        .HasColumnName("CodeType")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("VerifyCodeActivity");
                });

            modelBuilder.Entity("Dgab.Authentication.DomainModel.Modules.Groups.Entities.GroupPermission", b =>
                {
                    b.HasOne("Dgab.Authentication.DomainModel.Modules.Groups.Group", "Group")
                        .WithMany("GroupPermissions")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dgab.Authentication.DomainModel.Modules.Permissions.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dgab.Authentication.DomainModel.Modules.Groups.Entities.GroupUser", b =>
                {
                    b.HasOne("Dgab.Authentication.DomainModel.Modules.Groups.Group", "Group")
                        .WithMany("GroupUsers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dgab.Authentication.DomainModel.Modules.UserActivities.Activities.Activity", b =>
                {
                    b.HasOne("Dgab.Authentication.DomainModel.Modules.UserActivities.UserActivity", null)
                        .WithOne("Activity")
                        .HasForeignKey("Dgab.Authentication.DomainModel.Modules.UserActivities.Activities.Activity", "UserActivityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dgab.Authentication.DomainModel.Modules.UserActivities.UserActivity", b =>
                {
                    b.OwnsOne("Dgab.Authentication.DomainModel.Modules.UserActivities.ValueObjects.ClientInfo", "ClientInfo", b1 =>
                        {
                            b1.Property<Guid>("UserActivityId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Agent")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Device")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("IP")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OS")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserActivityId");

                            b1.ToTable("UserActivities");

                            b1.WithOwner()
                                .HasForeignKey("UserActivityId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
